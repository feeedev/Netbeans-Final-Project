/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package librarymain.libraryproject;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserAcc;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserAuthor;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserBdate;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserID;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserName;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserPhone;
import static librarymain.libraryproject.homeJF.AllBorrowAlluserRedate;
import static librarymain.libraryproject.homeJF.BorrowHisArray;
import static librarymain.libraryproject.homeJF.BorrowHisAuthor;
import static librarymain.libraryproject.homeJF.BorrowHisBorrowDate;
import static librarymain.libraryproject.homeJF.BorrowHisID;
import static librarymain.libraryproject.homeJF.BorrowHisName;
import static librarymain.libraryproject.homeJF.BorrowHisReturnDate;
import static librarymain.libraryproject.homeJF.tableBkBorrow;
import static librarymain.libraryproject.homeJF.userNameInput;

/**
 *
 * @author wenda
 */
public class ReturnFrame extends javax.swing.JFrame {
    String[] ReturnArray = null;
    List<String> ReturnID = new ArrayList<>();
    List<String> ReturnName = new ArrayList<>();
    List<String> ReturnAuthor = new ArrayList<>();
    List<String> ReturnBorrowDate = new ArrayList<>();
    List<String> ReturnReturnDate = new ArrayList<>();
    String selectedItemStr;
    String selectedbkName;
    String selectedbkAuthor;
    int indexBK;
    Object selectedItem;
    String formattedDate;
    /**
     * Creates new form ReturnFrame
     */
    public ReturnFrame() {
        initComponents();
        ShowReturn();
    }
    private void ShowReturn() {
        
        //System.out.println(userNameInput + "  " +passwordInput);
        try {
            Scanner ReturnFile = new Scanner(new File("BorrowList.txt"));
            while (ReturnFile.hasNextLine())
            {
              String s = ReturnFile.nextLine();  
              ReturnArray = s.split(",");
              
              if (homeJF.userNameInput.equals(ReturnArray[5]) && ReturnArray[4].equals("not returned yet")) {
                    ReturnID.add(ReturnArray[0]);
                    ReturnName.add(ReturnArray[1]);
                    ReturnAuthor.add(ReturnArray[2]);
                    ReturnBorrowDate.add(ReturnArray[3]);
                    ReturnReturnDate.add(ReturnArray[4]);
              }
          
              
            } //papatsiri.apip Poxxy8990
            ReturnFile.close();
            
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,
                    "User Database Not Found", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        String [] ComboID = new String[ReturnID.size()+1];
        ComboID[0] = "Select Book";
        int indexget = 0;
        for(int i = 0; i < ReturnID.size(); i++) {
            ComboID[i+1] = ReturnID.get(indexget);
            indexget = indexget + 1;
        }
        ReturnCombo.setSelectedIndex(0);
        returnBookName.setText(null);
        returnDateInput.setText(null);
        ReturnCombo.setBackground(Color.white);
        ReturnCombo.setForeground(Color.black);
        ReturnCombo.setModel(new javax.swing.DefaultComboBoxModel(ComboID));
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnPanel = new javax.swing.JPanel();
        lblReturnHead = new javax.swing.JLabel();
        labelBookID = new javax.swing.JLabel();
        labelReturnDate = new javax.swing.JLabel();
        returnDateInput = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        ReturnCombo = new javax.swing.JComboBox<>();
        labelReturnDate1 = new javax.swing.JLabel();
        returnBookName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(584, 418));
        setMinimumSize(new java.awt.Dimension(584, 418));
        setResizable(false);

        returnPanel.setBackground(new java.awt.Color(255, 227, 227));

        lblReturnHead.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblReturnHead.setText("Return Book");

        labelBookID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelBookID.setText("Book ID");

        labelReturnDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelReturnDate.setText("Return Date");

        returnDateInput.setEditable(false);
        returnDateInput.setBackground(new java.awt.Color(255, 255, 255));

        btnSubmit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSubmitMouseClicked(evt);
            }
        });

        ReturnCombo.setBackground(new java.awt.Color(255, 255, 255));
        ReturnCombo.setForeground(new java.awt.Color(0, 0, 0));
        ReturnCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ReturnCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ReturnComboItemStateChanged(evt);
            }
        });

        labelReturnDate1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelReturnDate1.setText("Book Name");

        returnBookName.setEditable(false);
        returnBookName.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout returnPanelLayout = new javax.swing.GroupLayout(returnPanel);
        returnPanel.setLayout(returnPanelLayout);
        returnPanelLayout.setHorizontalGroup(
            returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnPanelLayout.createSequentialGroup()
                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(returnPanelLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelReturnDate)
                            .addComponent(labelBookID)
                            .addComponent(labelReturnDate1))
                        .addGap(18, 18, 18)
                        .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(returnDateInput)
                            .addComponent(ReturnCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnBookName)))
                    .addGroup(returnPanelLayout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(lblReturnHead)))
                .addContainerGap(92, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, returnPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(266, 266, 266))
        );
        returnPanelLayout.setVerticalGroup(
            returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblReturnHead)
                .addGap(50, 50, 50)
                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBookID)
                    .addComponent(ReturnCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelReturnDate1)
                    .addComponent(returnBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(returnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelReturnDate)
                    .addComponent(returnDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(returnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(returnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseClicked
        // TODO add your handling code here:
        if (returnBookName.getText() == null || ReturnCombo.getSelectedIndex() == 0 || returnDateInput.getText() == null) {
                JOptionPane.showMessageDialog(null,
                    "Please complete the information.", "Return Book",
                    JOptionPane.INFORMATION_MESSAGE);
        } else{
            try {
                new FileWriter("BorrowList.txt", false).close();
//                File file = new File("BorrowList.txt");
                BufferedWriter writer = new BufferedWriter(new FileWriter("BorrowList.txt",true));
                List<Integer> AllIndexBookChange = new ArrayList<>();
                String BookIDchange = (String) selectedItem;
                for (int i = 0; i < AllBorrowAlluserID.size(); i++){
                    if (AllBorrowAlluserAcc.get(i).equals(userNameInput) && AllBorrowAlluserID.get(i).equals(BookIDchange)){
                    AllIndexBookChange.add(i);
                    }
                }
                System.out.println(AllIndexBookChange);
                for (int i =0; i < AllIndexBookChange.size(); i++) {
                    AllBorrowAlluserRedate.set(AllIndexBookChange.get(i), formattedDate);
                }
                writer.write(AllBorrowAlluserID.get(0)+","+AllBorrowAlluserName.get(0)+","+AllBorrowAlluserAuthor.get(0)+","+
                        AllBorrowAlluserBdate.get(0)+","+AllBorrowAlluserRedate.get(0)+","+AllBorrowAlluserAcc.get(0)+","+AllBorrowAlluserPhone.get(0));
                for (int k = 1; k < AllBorrowAlluserID.size(); k++){
                    writer.append("\n"+AllBorrowAlluserID.get(k)+","+AllBorrowAlluserName.get(k)+","+AllBorrowAlluserAuthor.get(k)+","+
                            AllBorrowAlluserBdate.get(k)+","+AllBorrowAlluserRedate.get(k)+","+AllBorrowAlluserAcc.get(k)+","+AllBorrowAlluserPhone.get(k));
                }
                writer.close();
                JOptionPane.showMessageDialog(null,
                    "Successfully! Returned", "Successfully",
                    JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Successfully wrote to the file.");
                ReturnCombo.setSelectedIndex(0);
                returnBookName.setText(null);
                returnDateInput.setText(null);
                UpdateBorrow();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null,
                    "An error occurred.", "Error",
                    JOptionPane.ERROR_MESSAGE);
                System.out.println("An error occurred.");
            }
        }
    }//GEN-LAST:event_btnSubmitMouseClicked

    private void ReturnComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ReturnComboItemStateChanged
        // TODO add your handling code here:
        LocalDateTime myDateObj = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd/MM/yy");
        formattedDate = myDateObj.format(myFormatObj);
        ReturnCombo.addActionListener (new ActionListener () {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectedItem = ReturnCombo.getSelectedItem();
                System.out.println(selectedItem);
                if (selectedItem != "Select Book")
                {
                    selectedItemStr = selectedItem.toString();
                    indexBK = ReturnID.indexOf(selectedItem);
                    selectedbkName = ReturnName.get(indexBK);
                    selectedbkAuthor = ReturnAuthor.get(indexBK);
                    returnBookName.setText(selectedbkName);
                    returnDateInput.setText(formattedDate);
                } else {
                    returnBookName.setText(null);
                    returnDateInput.setText(null);
                }
            }
        });
    }//GEN-LAST:event_ReturnComboItemStateChanged

     public void UpdateBorrow(){
        DefaultTableModel BorrowModel = (DefaultTableModel) tableBkBorrow.getModel();
        BorrowModel.setRowCount(0);
        BorrowHisArray = null;
        BorrowHisID.removeAll(BorrowHisID);
        BorrowHisName.removeAll(BorrowHisName);
        BorrowHisAuthor.removeAll(BorrowHisAuthor);
        BorrowHisBorrowDate.removeAll(BorrowHisBorrowDate);
        BorrowHisReturnDate.removeAll(BorrowHisReturnDate);
        AllBorrowAlluserID.removeAll(AllBorrowAlluserID);
        AllBorrowAlluserName.removeAll(AllBorrowAlluserName);
        AllBorrowAlluserAuthor.removeAll(AllBorrowAlluserAuthor);
        AllBorrowAlluserBdate.removeAll(AllBorrowAlluserBdate);
        AllBorrowAlluserRedate.removeAll(AllBorrowAlluserRedate);
        AllBorrowAlluserAcc.removeAll(AllBorrowAlluserAcc);
        AllBorrowAlluserPhone.removeAll(AllBorrowAlluserPhone);
        try {
            Scanner BorrowFile = new Scanner(new File("BorrowList.txt"));
            while (BorrowFile.hasNextLine())
            {
                String s = BorrowFile.nextLine();  
                BorrowHisArray = s.split(",");
                if (userNameInput.equals(BorrowHisArray[5])) {
                        BorrowHisID.add(BorrowHisArray[0]);
                        BorrowHisName.add(BorrowHisArray[1]);
                        BorrowHisAuthor.add(BorrowHisArray[2]);
                        BorrowHisBorrowDate.add(BorrowHisArray[3]);
                        BorrowHisReturnDate.add(BorrowHisArray[4]);
                }
                AllBorrowAlluserID.add(BorrowHisArray[0]);
                AllBorrowAlluserName.add(BorrowHisArray[1]);
                AllBorrowAlluserAuthor.add(BorrowHisArray[2]);
                AllBorrowAlluserBdate.add(BorrowHisArray[3]);
                AllBorrowAlluserRedate.add(BorrowHisArray[4]);
                AllBorrowAlluserAcc.add(BorrowHisArray[5]);
                AllBorrowAlluserPhone.add(BorrowHisArray[6]);
            } //papatsiri.apip Poxxy8990
            BorrowFile.close();
            
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null,
                    "User Database Not Found", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        for (int i = 0; i < BorrowHisID.size(); i++){
            Object[] BorrowRow = { BorrowHisID.get(i), BorrowHisName.get(i), 
                BorrowHisAuthor.get(i), BorrowHisBorrowDate.get(i), BorrowHisReturnDate.get(i)};
            BorrowModel.addRow(BorrowRow);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ReturnCombo;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel labelBookID;
    private javax.swing.JLabel labelReturnDate;
    private javax.swing.JLabel labelReturnDate1;
    private javax.swing.JLabel lblReturnHead;
    private javax.swing.JTextField returnBookName;
    private javax.swing.JTextField returnDateInput;
    private javax.swing.JPanel returnPanel;
    // End of variables declaration//GEN-END:variables
}
